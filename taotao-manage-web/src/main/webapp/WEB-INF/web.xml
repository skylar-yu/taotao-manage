<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">
	<display-name>taotao-manage</display-name>

	<!--ContextLoaderListener监听器是装载spring框架本身的bean上下文（如Service和DAO层等），
		DispatcherServlet是装载SpringMVC的上下文。
	-->

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/applicationContext*.xml</param-value>
	</context-param>

	<!--
		如filter 需要用到 bean ，但是加载顺序是 先加载filter 后加载spring，则filter中初始化操作中的bean为null；
	首先可以肯定 加载顺序与他们在web.xml 文件中的先后顺序无关。
	web.xml 中 listener 和 serverlet 的加载顺序为 先 listener 后serverlet
	最终得出结果：先 listener >> filter >> servlet >>  spring
	 所以，如果过滤器中要使用到 bean，可以将spring 的加载 改成 Listener的方式
	 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- 编码过滤器，以UTF8编码 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 解决PUT请求无法提交表单数据的问题 -->
	<filter>
		<filter-name>HttpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>HttpMethodFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 将POST请求转化为DELETE或者是PUT 要用_method指定真正的请求参数 -->
	<filter>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


	<!-- 配置SpringMVC框架入口 -->
	<servlet>
		<servlet-name>taotao-manage</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<description>配置spring mvc加载的配置文件（配置处理器映射器、适配器等等）</description>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/taotao-manage-servlet.xml</param-value>
		</init-param>
		<!-- 1容器启动时初始化该servlete, 0第一次访问的时候初始化该servlet -->
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>taotao-manage</servlet-name>
		<!-- 可行： /、*.xxx、/xxx/*
		    不可行： /* (struct中可以这样配置，原因是struct和springmvc的入口不一样，struct入口是Filter,springmvc入口是servlet,在servlet中“/”就代表全部了) -->
		<url-pattern>/rest/*</url-pattern>
	</servlet-mapping>

	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>

</web-app>
